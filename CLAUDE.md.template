# {{PROJECT_NAME}} - Claude Context

## Project Overview

**Name**: {{PROJECT_NAME}}
**Description**: {{PROJECT_DESCRIPTION}}
**Type**: {{PROJECT_TYPE}}
**Author**: {{AUTHOR_NAME}} ({{AUTHOR_EMAIL}})
**License**: {{LICENSE}}

## Technical Details

- **Python Version**: {{MIN_PYTHON_VERSION}}+
- **Package Manager**: uv
- **Testing**: pytest with coverage
- **Linting**: ruff (replaces black, isort, flake8)
- **Type Checking**: mypy
- **Security**: safety, bandit
- **Automation**: nox for multi-environment testing

## Project Structure

```
{{PROJECT_NAME}}/
├── src/{{PROJECT_NAME}}/              # Source code
├── tests/                             # Test files
├── pyproject.toml                     # Project configuration
├── noxfile.py                         # Automation tasks
├── justfile                           # Development commands
├── README.md                          # Documentation
{% if PROJECT_TYPE == 'data' %}├── notebooks/                         # Jupyter notebooks
├── data/                              # Data files (raw, processed, external)
├── scripts/                           # Utility scripts{% endif %}
└── CLAUDE.md                          # This file
```

## Development Workflow

### Setup
```bash
# Install dependencies
uv sync --extra dev{% if PROJECT_TYPE == 'data' %} --extra data{% endif %}

# Setup pre-commit hooks
pre-commit install
```

### Testing
```bash
# Run tests
just test
# or: uv run pytest

# Test with coverage
just test-cov

# Test all Python versions
just test-all
# or: nox -s tests
```

### Code Quality
```bash
# Format code
just format

# Lint code  
just lint

# Type check
just type-check

# All quality checks
just qa
```

### Automation
```bash
# Full CI pipeline
just ci
# or: nox -s ci

# Individual nox sessions
nox -s tests        # Run tests
nox -s lint         # Lint code
nox -s type_check   # Type checking
nox -s safety       # Security check
```

{% if USE_DOCKER %}### Docker Development
```bash
# Start development environment
just docker-dev
# or: nox -s docker_dev

# Access development shell
just docker-shell

# Stop services
just docker-down
```
{% endif %}

{% if USE_JUPYTER %}### Jupyter Notebooks
```bash
# Start Jupyter Lab locally
just jupyter
# or: nox -s jupyter

# Start Jupyter in Docker
just docker-jupyter

# Check notebook code quality
nox -s data_quality
```
{% endif %}

{% if USE_SPARK %}### PySpark
```bash
# Setup Spark environment
nox -s spark_setup

# Example usage in Python:
from {{PROJECT_NAME}}.spark_utils import get_local_spark_session

spark = get_local_spark_session()
# ... your Spark code ...
spark.stop()
```
{% endif %}

## Key Commands

- `just setup` - Setup development environment
- `just test` - Run tests
- `just ci` - Run full CI pipeline
- `just format` - Format and fix code
- `just clean` - Clean build artifacts
- `just info` - Show project information

## Notes for Claude

- This project uses **uv** for dependency management (faster than pip/poetry)
- **ruff** handles all code formatting and linting (replaces black+isort+flake8)
- **nox** provides automation across multiple Python versions
- **justfile** provides convenient development commands
- All tools are configured in `pyproject.toml`

When helping with this project:
1. Use the existing tools and configurations
2. Follow the established patterns in the codebase
3. Add tests for new functionality
4. Update documentation as needed
5. Run `just ci` before committing changes

{% if PROJECT_TYPE == 'data' %}## Data Project Specifics

**Data Sources**: {{DATA_SOURCES}}

- Data files go in `data/` with subdirectories for raw/processed/external
- Notebooks go in `notebooks/` for exploration and analysis
- Use the data utilities in `src/{{PROJECT_NAME}}/data_utils.py`
- Spark utilities available in `src/{{PROJECT_NAME}}/spark_utils.py`

### Data Workflow
1. Raw data → `data/raw/`
2. Processing scripts → `notebooks/` or `scripts/`
3. Processed data → `data/processed/`
4. Analysis → `notebooks/`
5. Results → `data/external/` or reports

{% endif %}{% if USE_CLI %}## CLI Interface

This project includes a command-line interface:

```bash
# Install in development mode
uv pip install -e .

# Run CLI
{{PROJECT_NAME}} --help
```

{% endif %}## Testing Strategy

- **Unit tests**: Fast, isolated tests for individual functions
- **Integration tests**: Test component interactions
- **End-to-end tests**: Test complete workflows
- **Property-based testing**: Use hypothesis for edge cases
- **Performance tests**: Benchmark critical code paths

### Test Organization
```
tests/
├── unit/           # Fast unit tests
├── integration/    # Integration tests
├── e2e/           # End-to-end tests
└── conftest.py    # Shared fixtures
```

## Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Make changes and add tests
4. Run quality checks: `just ci`
5. Commit changes: `git commit -m "Description"`
6. Push and create a pull request

## Deployment

{% if PROJECT_TYPE == 'package' %}### Package Distribution
```bash
# Build package
just build

# Upload to PyPI (configure tokens first)
uv publish
```

{% endif %}### Environment Variables
Copy `.env.example` to `.env` and configure:
- API keys
- Database connections
- Feature flags
- Environment-specific settings